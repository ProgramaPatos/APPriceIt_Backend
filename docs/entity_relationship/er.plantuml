@startuml er
allow_mixing
!include ../constants.plantuml
!procedure $rel($name, $from, $modFrom, $to, $modTo, $desc="")
    $from $modFrom-- $name
    $name --$modTo $to
    class $name << (R,#CB0E00) $desc >>
!endprocedure

title Entidad Relaci√≥n APPriceIt

Entity Store {
    * store_id: autoincrement int
    --
    /'The length of the varchar should be selected based on
    name length data queried from OSM (172 for Colombia), or maybe just use text like
    the imported database does by default? '/
    * store_name: varchar(?)
    /' 2D point with the Spatial Reference Identifier
       (SRID) of Open Street Map data'/
    * store_location_geom: geom(POINTXY(srid=4326))
    store_description: text
    /' This should only store in the hours range
     Ensure this as a bussiness rule'/
    store_schedule: tstzrange
    * store_creation_timestamp: timestamp
}


entity AppUser {
    * user_id: autoincrement int
    --
    * user_name: varchar(70)
    * user_password: varchar(70)
    * user_creation_timestamp: timestamp
    * user_state: bool
}

AppUser |o--o{ Store: Creates

entity Role {
    * role_id: autoincrement int
    --
    * role_name: varchar(70)
}

AppUser }o--|{ Role : has


Entity Product {
    * product_id: autoincrement int
    --
    * product_name: varchar(70)
    product_description: Text
}


Entity Tag {
    * tag_id: autoincrement int
    --
    * tag_name: varchar(70)
    tag_description: Text
}


Product }o--o{ Tag : is Categorized within
Store }o--o{ Tag : is Categorized within

Entity Price {
    * price_id: autoincrement int
    --
    /' TODO: Numeric value precision should be adjusted to
    deal reasonably with multiple currencies and
    possibly many digits after the decimal point'/
    * price_value: numeric(?,?)
    * price_timestamp: timestamp
}

AppUser |o--o{ Price : publishes


/' This entity represents the reviews and comments other users
can make about a price on a product, an automoderation method
to let users filter down unaccurate prices
'/
Entity PriceReview {
    * pricereview_id: autoincrement int
    --
    /' TODO: This score value should be within a valid range
    to be defined'/
    * pricereview_score: int
    * pricereview_creation_timestamp: timestamp
    * pricereview_modification_timestamp: timestamp
    pricereview_comment: text
}

Price ||--o{ PriceReview : is reviewed by
/'
 ' An appuser shouldn't be able to review its own price
 '/
AppUser ||--o{ PriceReview : reviews with


Entity ProductAtStore {
    * productatstore_id: autoincrement int
    --
    productatstore_availability: int
}

ProductAtStore }o--|| Store : offers
ProductAtStore }o--|| Product : is offered as

ProductAtStore ||--o{ Price : costs


@enduml
